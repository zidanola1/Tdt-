// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © EL MEHDI - PURE ORIGINAL

//@version=6
indicator("💎 EL MEHDI PURE ORIGINAL 💎", overlay=true, max_labels_count=500, max_lines_count=500)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 INPUTS - ORIGINAL STYLE
// ═══════════════════════════════════════════════════════════════════════════════════

// Dashboard
showDashboard = input(true, "Smart Panel", group='Dashboard Settings')
locationDashboard = input.string("Bottom Right", "Location", ["Top Right", "Middle Right", "Bottom Right", "Top Center", "Middle Center", "Bottom Center", "Top Left", "Middle Left", "Bottom Left"], group='Dashboard Settings', inline='agfh1')
sizeDashboard = input.string("Small", "Size", ["Large", "Normal", "Small", "Tiny"], group='Dashboard Settings', inline='agfh1')

// Signals - ORIGINAL
nbuysell = input.bool(true, 'Show Signals', inline="BSNM", group='BUY AND SELL SIGNALS SETTINGS')
nsensitivity = input.float(defval=2, title="Sensitivity", minval=1, maxval=20, group='BUY AND SELL SIGNALS SETTINGS')
smartsignalsonly = input.bool(false, 'Smart Signals Only', group='BUY AND SELL SIGNALS SETTINGS')

// Risk Management - ORIGINAL
levels = input.bool(true, "Take Profit/ Stop-Loss Areas", group="RISK MANAGEMENT SETTINGS", inline="MMDB2")
lvlDistance = input.int(20, "Distance", 1, inline="levels2", group="RISK MANAGEMENT SETTINGS")
lvlDecimals = input.int(2, "Decimals", 1, 8, inline="levels2", group="RISK MANAGEMENT SETTINGS")
atrRisk = input.int(1, "Risk %", 1, group="RISK MANAGEMENT SETTINGS", inline="levels3")
atrLen = input.int(14, "ATR Length", 1, group="RISK MANAGEMENT SETTINGS", inline="levels3")

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚀 ORIGINAL SUPERTREND - PURE
// ═══════════════════════════════════════════════════════════════════════════════════

supertrend(_close, factor, atrLen) =>
    atr = ta.atr(atrLen)
    upperBand = _close + factor * atr
    lowerBand = _close - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])
    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand
    int direction = na
    float superTrend = na
    prevSuperTrend = superTrend[1]
    if na(atr[1])
        direction := 1
    else if prevSuperTrend == prevUpperBand
        direction := close > upperBand ? -1 : 1
    else
        direction := close < lowerBand ? 1 : -1
    superTrend := direction == -1 ? lowerBand : upperBand
    [superTrend, direction]

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 ORIGINAL CALCULATIONS - PURE
// ═══════════════════════════════════════════════════════════════════════════════════

// Moving averages - ORIGINAL
ema200con = ta.ema(close, 200)
sma9 = ta.sma(close, 13)

// SuperTrend - ORIGINAL
[supertrend, direction] = supertrend(close, nsensitivity * 2, 11)

// ORIGINAL SIGNAL LOGIC - PURE
bull = ta.crossover(close, supertrend) and close >= sma9
bear = ta.crossunder(close, supertrend) and close <= sma9

// ═══════════════════════════════════════════════════════════════════════════════════
// 🛡️ ORIGINAL RISK MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════════

// Original position tracking
trigger = nz(ta.barssince(bull), bar_index) < nz(ta.barssince(bear), bar_index) ? 1 : 0
countBull = ta.barssince(bull)
countBear = ta.barssince(bear)
currentposition = countBull > countBear ? 'Sell' : 'Buy'

// Original ATR calculation
atrBand = ta.atr(atrLen) * atrRisk
atrStop = trigger == 1 ? low - atrBand : high + atrBand

// Original entry function
lastTrade(close) => ta.valuewhen(bull or bear, close, 0)

// Original decimals format
decimals = lvlDecimals == 1 ? "#.#" : lvlDecimals == 2 ? "#.##" : lvlDecimals == 3 ? "#.###" : lvlDecimals == 4 ? "#.####" : lvlDecimals == 5 ? "#.#####" : lvlDecimals == 6 ? "#.######" : lvlDecimals == 7 ? "#.#######" : "#.########"

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 PERFORMANCE TRACKING
// ═══════════════════════════════════════════════════════════════════════════════════

var int total_signals = 0
var int buy_signals = 0
var int sell_signals = 0
var int smart_buy_signals = 0
var int smart_sell_signals = 0

if bull and not bull[1]
    total_signals += 1
    buy_signals += 1
    if close > ema200con
        smart_buy_signals += 1

if bear and not bear[1]
    total_signals += 1
    sell_signals += 1
    if close < ema200con
        smart_sell_signals += 1

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 MULTI-TIMEFRAME ANALYSIS - ORIGINAL
// ═══════════════════════════════════════════════════════════════════════════════════

f_chartTfInMinutes() =>
    float _resInMinutes = timeframe.multiplier * (
      timeframe.isseconds ? 1. / 60             :
      timeframe.isminutes ? 1.                  :
      timeframe.isdaily   ? 60. * 24            :
      timeframe.isweekly  ? 60. * 24 * 7        :
      timeframe.ismonthly ? 60. * 24 * 30.4375  : na)

emaBull = close > ta.ema(close, 200)
equal_tf(res) => str.tonumber(res) == f_chartTfInMinutes()
higher_tf(res) => str.tonumber(res) > f_chartTfInMinutes()
too_small_tf(res) => (timeframe.isweekly and res=="1") or (timeframe.ismonthly and str.tonumber(res) < 10)

securityNoRep(sym, res, src) =>
    bool bull = na
    bull := equal_tf(res) ? src : bull
    bull := higher_tf(res) ? request.security(sym, res, src, barmerge.gaps_off, barmerge.lookahead_on) : bull
    bull_array = request.security_lower_tf(syminfo.tickerid, higher_tf(res) ? str.tostring(f_chartTfInMinutes()) : too_small_tf(res) ? (timeframe.isweekly ? "3" : "10") : res, src)
    if array.size(bull_array) > 1 and not equal_tf(res) and not higher_tf(res)
        bull := array.pop(bull_array)
    array.clear(bull_array)
    bull

TF1Bull = securityNoRep(syminfo.tickerid, "1", emaBull)
TF5Bull = securityNoRep(syminfo.tickerid, "5", emaBull)
TF15Bull = securityNoRep(syminfo.tickerid, "15", emaBull)
TF30Bull = securityNoRep(syminfo.tickerid, "30", emaBull)
TF60Bull = securityNoRep(syminfo.tickerid, "60", emaBull)
TF240Bull = securityNoRep(syminfo.tickerid, "240", emaBull)
TFDBull = securityNoRep(syminfo.tickerid, "1440", emaBull)

// ═══════════════════════════════════════════════════════════════════════════════════
// 📊 ORIGINAL DASHBOARD - PURE
// ═══════════════════════════════════════════════════════════════════════════════════

var dashboard_loc = locationDashboard == "Top Right" ? position.top_right : locationDashboard == "Middle Right" ? position.middle_right : locationDashboard == "Bottom Right" ? position.bottom_right : locationDashboard == "Top Center" ? position.top_center : locationDashboard == "Middle Center" ? position.middle_center : locationDashboard == "Bottom Center" ? position.bottom_center : locationDashboard == "Top Left" ? position.top_left : locationDashboard == "Middle Left" ? position.middle_left : position.bottom_left

var dashboard_size = sizeDashboard == "Large" ? size.large : sizeDashboard == "Normal" ? size.normal : sizeDashboard == "Small" ? size.small : size.tiny

dashboard_cell(column, row, txt, signal=false) => 
    table.cell(dashboard, column, row, txt, 0, 0, signal ? #000000 : color.white, text_size=dashboard_size)
    
dashboard_cell_bg(column, row, col) => 
    table.cell_set_bgcolor(dashboard, column, row, col)

var dashboard = showDashboard ? table.new(dashboard_loc, 3, 9, color.rgb(30, 34, 45, 60), #3d384300, 2, color.rgb(30, 34, 45, 60), 1) : na

if barstate.islast and showDashboard
    // MTF Trend
    dashboard_cell(0, 0, "MTF")
    dashboard_cell(0, 1, "M1"), dashboard_cell_bg(0, 1, TF1Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 2, "M5"), dashboard_cell_bg(0, 2, TF5Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 3, "M15"), dashboard_cell_bg(0, 3, TF15Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 4, "M30"), dashboard_cell_bg(0, 4, TF30Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 5, "1H"), dashboard_cell_bg(0, 5, TF60Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 6, "4H"), dashboard_cell_bg(0, 6, TF240Bull ? #0395fc : #fd0205)
    dashboard_cell(0, 7, "D1"), dashboard_cell_bg(0, 7, TFDBull ? #0395fc : #fd0205)
    dashboard_cell(0, 8, "🎯 Signal"), dashboard_cell_bg(0, 8, bull ? #0395fc : bear ? #fd0205 : #4b148d)
    
    // Middle part
    dashboard_cell(1, 0, "💎 EL MEHDI PURE 💎")
    dashboard_cell(1, 1, "👉 Position")
    dashboard_cell(1, 2, "🔎 Sensitivity")
    dashboard_cell(1, 3, "📊 Total Signals")
    dashboard_cell(1, 4, "🟢 Buy Signals")
    dashboard_cell(1, 5, "🔴 Sell Signals")
    dashboard_cell(1, 6, "⭐ Smart Buys")
    dashboard_cell(1, 7, "⭐ Smart Sells")
    dashboard_cell(1, 8, "💹 Current Signal")
    
    // Values
    dashboard_cell(2, 0, "")
    dashboard_cell(2, 1, str.tostring(currentposition))
    dashboard_cell(2, 2, str.tostring(nsensitivity))
    dashboard_cell(2, 3, str.tostring(total_signals))
    dashboard_cell(2, 4, str.tostring(buy_signals))
    dashboard_cell(2, 5, str.tostring(sell_signals))
    dashboard_cell(2, 6, str.tostring(smart_buy_signals))
    dashboard_cell(2, 7, str.tostring(smart_sell_signals))
    dashboard_cell(2, 8, bull ? "🚀 BUY" : bear ? "🔻 SELL" : "🟡 HOLD")

// ═══════════════════════════════════════════════════════════════════════════════════
// 🎨 VISUAL SIGNALS - ORIGINAL STYLE
// ═══════════════════════════════════════════════════════════════════════════════════

// High Lows - ORIGINAL
y1 = low - (ta.atr(30) * 2)
y2 = high + (ta.atr(30) * 2)

// ORIGINAL SIGNAL LABELS
buy = bull and nbuysell and smartsignalsonly == false ? label.new(bar_index, y1, close > ema200con ? "Smart\nBuy" : "Buy", xloc.bar_index, yloc.price, #0395fc, label.style_label_up, color.white, size.normal) : na
sell = bear and nbuysell and smartsignalsonly == false ? label.new(bar_index, y2, close < ema200con ? "Smart\nSell" : "Sell", xloc.bar_index, yloc.price, #fd0205, label.style_label_down, color.white, size.normal) : na

SmartBuy = bull and nbuysell and close > ema200con and smartsignalsonly == true ? label.new(bar_index, y1, "Smart\nBuy", xloc.bar_index, yloc.price, #0395fc, label.style_label_up, color.white, size.normal) : na
SmartSell = bear and nbuysell and close < ema200con and smartsignalsonly == true ? label.new(bar_index, y2, "Smart\nSell", xloc.bar_index, yloc.price, #fd0205, label.style_label_down, color.white, size.normal) : na

// ═══════════════════════════════════════════════════════════════════════════════════
// 🛡️ ORIGINAL RISK LEVELS
// ═══════════════════════════════════════════════════════════════════════════════════

// ORIGINAL RISK LABELS
entry = levels ? label.new(time, close, "ENTRY " + str.tostring(lastTrade(close), decimals), xloc.bar_time, yloc.price, color.orange, label.style_label_left, color.white, size.normal) : na
label.set_x(entry, label.get_x(entry) + math.round(ta.change(time) * lvlDistance))
label.set_y(entry, lastTrade(close))
label.delete(entry[1])

stop_y = lastTrade(atrStop)
stop = levels ? label.new(time, close, "SL " + str.tostring(stop_y, decimals), xloc.bar_time, yloc.price, #fd0205, label.style_label_left, color.white, size.normal) : na
label.set_x(stop, label.get_x(stop) + math.round(ta.change(time) * lvlDistance))
label.set_y(stop, stop_y)
label.delete(stop[1])

tp1Rl_y = (lastTrade(close) - lastTrade(atrStop)) * 1 + lastTrade(close)
tp1Rl = levels ? label.new(time, close, "1:1 TP " + str.tostring(tp1Rl_y, decimals), xloc.bar_time, yloc.price, #0395fc, label.style_label_left, color.white, size.normal) : na
label.set_x(tp1Rl, label.get_x(tp1Rl) + math.round(ta.change(time) * lvlDistance))
label.set_y(tp1Rl, tp1Rl_y)
label.delete(tp1Rl[1])

tp2RL_y = (lastTrade(close) - lastTrade(atrStop)) * 2 + lastTrade(close)
tp2RL = levels ? label.new(time, close, "2:1 TP " + str.tostring(tp2RL_y, decimals), xloc.bar_time, yloc.price, #0395fc, label.style_label_left, color.white, size.normal) : na
label.set_x(tp2RL, label.get_x(tp2RL) + math.round(ta.change(time) * lvlDistance))
label.set_y(tp2RL, tp2RL_y)
label.delete(tp2RL[1])

tp3RL_y = (lastTrade(close) - lastTrade(atrStop)) * 3 + lastTrade(close)
tp3RL = levels ? label.new(time, close, "3:1 TP " + str.tostring(tp3RL_y, decimals), xloc.bar_time, yloc.price, #0395fc, label.style_label_left, color.white, size.normal) : na
label.set_x(tp3RL, label.get_x(tp3RL) + math.round(ta.change(time) * lvlDistance))
label.set_y(tp3RL, tp3RL_y)
label.delete(tp3RL[1])

// ORIGINAL RISK LINES
style = line.style_dashed
lineEntry = levels ? line.new(bar_index - (trigger == 0 ? countBull : countBear), lastTrade(close), bar_index + lvlDistance, lastTrade(close), xloc.bar_index, extend.none, color.orange, style, 2) : na
line.delete(lineEntry[1])

lineStop = levels ? line.new(bar_index - (trigger == 0 ? countBull : countBear), stop_y, bar_index + lvlDistance, stop_y, xloc.bar_index, extend.none, #fd0205, style, 2) : na
line.delete(lineStop[1])

lineTp1Rl = levels ? line.new(bar_index - (trigger == 0 ? countBull : countBear), tp1Rl_y, bar_index + lvlDistance, tp1Rl_y, xloc.bar_index, extend.none, #0395fc, style, 2) : na
line.delete(lineTp1Rl[1])

lineTp2RL = levels ? line.new(bar_index - (trigger == 0 ? countBull : countBear), tp2RL_y, bar_index + lvlDistance, tp2RL_y, xloc.bar_index, extend.none, #0395fc, style, 2) : na
line.delete(lineTp2RL[1])

lineTp3RL = levels ? line.new(bar_index - (trigger == 0 ? countBull : countBear), tp3RL_y, bar_index + lvlDistance, tp3RL_y, xloc.bar_index, extend.none, #0395fc, style, 2) : na
line.delete(lineTp3RL[1])

// ═══════════════════════════════════════════════════════════════════════════════════
// 🚨 ORIGINAL ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════

alertcondition(bull, title='🚀 BUY SIGNAL', message="💎 EL MEHDI: " + (close > ema200con ? "SMART BUY" : "BUY") + " Signal!\nEntry: " + str.tostring(close) + "\nSL: " + str.tostring(stop_y) + "\nTP1: " + str.tostring(tp1Rl_y))
alertcondition(bear, title='🔻 SELL SIGNAL', message="💎 EL MEHDI: " + (close < ema200con ? "SMART SELL" : "SELL") + " Signal!\nEntry: " + str.tostring(close) + "\nSL: " + str.tostring(stop_y) + "\nTP1: " + str.tostring(tp1Rl_y))

// ORIGINAL BAR COLORING
trendbarcolor = close > supertrend ? #0395fc : #fd0205
barcolor(trendbarcolor)

// Plot SuperTrend - ORIGINAL
plot(supertrend, "SuperTrend", color=direction == 1 ? color.lime : color.red, linewidth=2)