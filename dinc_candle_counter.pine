//@version=6
indicator("DINC Candle Counter Pro", shorttitle="DINC Pro", overlay=true, max_labels_count=500, max_lines_count=500)

// Input parameters - Basic Settings
start_date = input.time(timestamp("2025-07-10 10:00"), "Start Date", group="Basic Settings")
sequence_type = input.string("custom", "Sequence Type", options=["custom", "sequence_7", "sequence_13", "sequence_21", "sequence_5", "sequence_9", "sequence_11", "time_expansion_1", "time_expansion_2", "time_expansion_3", "time_contraction_1", "time_contraction_2", "time_contraction_3", "time_distortion_1", "time_distortion_2", "time_distortion_3", "gann_cardinal", "gann_ordinal"], group="Basic Settings")
custom_sequence = input.string("1,7,13,21,33", "Custom Sequence", group="Basic Settings")
max_candles = input.int(100, "Number of Candles", minval=1, maxval=500, group="Basic Settings")

// Custom Sequences Toggle
use_custom_seq_1 = input.bool(false, "Use Custom Sequence 1", group="Custom Sequences")
custom_sequence_1 = input.string("7,13,21,31,42", "Custom Sequence 1", group="Custom Sequences")
use_custom_seq_2 = input.bool(false, "Use Custom Sequence 2", group="Custom Sequences") 
custom_sequence_2 = input.string("5,9,11,17,25,37", "Custom Sequence 2", group="Custom Sequences")

// Anchoring Settings
use_manual_anchor = input.bool(false, "Use Manual Anchor Point", group="Anchoring")
manual_anchor_bar = input.int(0, "Manual Anchor Bar Index (0=current)", group="Anchoring")
save_anchor_points = input.bool(true, "Save Anchor Points (Persistent)", group="Anchoring")

// Counting Direction
enable_backward_count = input.bool(false, "Enable Backward Counting", group="Counting Direction")
backward_sequence = input.string("7,13,21", "Backward Count Sequence", group="Counting Direction")

// Future Projections
enable_future_projections = input.bool(false, "Enable Future Projections", group="Future Projections")
projection_sequence = input.string("7,13,21", "Future Projection Sequence", group="Future Projections")

// Multi-Timeframe Settings
enable_mtf = input.bool(false, "Enable Multi-Timeframe Overlay", group="Multi-Timeframe")
higher_tf = input.timeframe("1H", "Higher Timeframe", group="Multi-Timeframe")
mtf_sequence = input.string("7,13,21", "MTF Sequence", group="Multi-Timeframe")
show_mtf_confluence = input.bool(true, "Show MTF Confluence Markers", group="Multi-Timeframe")

// EMA Settings
show_ema = input.bool(false, "Show EMA 8/21", group="EMA Settings")
ema_8_color = input.color(color.blue, "EMA 8 Color", group="EMA Settings")
ema_21_color = input.color(color.red, "EMA 21 Color", group="EMA Settings")

// Time Distortion Enhanced
enhanced_td_detection = input.bool(true, "Enhanced Time Distortion (Doji) Detection", group="Time Distortion")
doji_threshold = input.float(0.1, "Doji Body Threshold (% of range)", minval=0.01, maxval=0.5, step=0.01, group="Time Distortion")
skip_time_distortion = input.bool(false, "Skip Time Distortion Candles", group="Time Distortion")

// Display settings
display_position = input.string("above_candle", "Display Numbers Above/Below", options=["above_candle", "below_candle"], group="Display Settings")
vertical_shift = input.int(0, "Vertical Shift Above/Below", group="Display Settings")
normal_color = input.color(color.gray, "Normal Number Color", group="Display Settings")
sequence_color = input.color(color.red, "Sequence Number Color", group="Display Settings")
backward_color = input.color(color.purple, "Backward Count Color", group="Display Settings")
future_color = input.color(color.orange, "Future Projection Color", group="Display Settings")
mtf_color = input.color(color.cyan, "MTF Overlay Color", group="Display Settings")
confluence_color = input.color(color.yellow, "Confluence Marker Color", group="Display Settings")
display_only_sequence = input.bool(true, "Display Only Sequence Numbers", group="Display Settings")
label_size = input.string("normal", "Label Size", options=["tiny", "small", "normal", "large", "huge"], group="Display Settings")
inputs_in_status = input.bool(true, "Inputs in Status Line", group="Display Settings")

// Enhanced sequences with proper counting starting from 1
get_sequence(string seq_type) =>
    switch seq_type
        "sequence_7" => "7,13,21,31,42"
        "sequence_13" => "13,21,25,31,42"
        "sequence_21" => "21,31,42,63"
        "sequence_5" => "5,9,11,17,25,37"
        "sequence_9" => "9,11,17,25,37"
        "sequence_11" => "11,17,25,37"
        "time_expansion_1" => "4,7,9,15"
        "time_expansion_2" => "7,11,15,19"
        "time_expansion_3" => "1,6,9,11"
        "time_contraction_1" => "3,4,7,8"
        "time_contraction_2" => "4,5,8,9"
        "time_contraction_3" => "2,3,6,7"
        "time_distortion_1" => "7,9,12,14"
        "time_distortion_2" => "8,11,13,15"
        "time_distortion_3" => "3,4,5,7"
        "gann_cardinal" => "1,2,4,8,16,32,64,128"
        "gann_ordinal" => "3,6,12,24,48,96,192"
        => custom_sequence

// Parse sequence string into array
parse_sequence(string seq_str) =>
    sequence = array.new<float>()
    parts = str.split(seq_str, ",")
    for part in parts
        trimmed_part = str.trim(part)
        if str.length(trimmed_part) > 0
            num_value = str.tonumber(trimmed_part)
            if not na(num_value)
                array.push(sequence, num_value)
    sequence

// Enhanced Doji Detection (Time Distortion)
is_doji_candle(int index) =>
    if index == 0
        candle_range = high - low
        body_size = math.abs(close - open)
        candle_range > 0 ? body_size / candle_range <= doji_threshold : false
    else
        candle_range = high[index] - low[index]
        body_size = math.abs(close[index] - open[index])
        candle_range > 0 ? body_size / candle_range <= doji_threshold : false

// Enhanced Time Distortion Detection (includes doji logic)
is_time_distortion_candle(int index) =>
    result = false
    if enhanced_td_detection
        // Check for doji pattern (main TD indicator)
        is_doji = is_doji_candle(index)
        
        if index == 0 and bar_index > 1
            // Inside bar pattern
            is_inside = high <= high[1] and low >= low[1]
            
            // Small range compared to average
            current_range = high - low
            prev_range = high[1] - low[1]
            small_range = prev_range > 0 ? current_range < (prev_range * 0.6) : false
            
            result := is_doji or is_inside or small_range
            
        else if index > 1
            is_inside = high[index] <= high[index + 1] and low[index] >= low[index + 1]
            current_range = high[index] - low[index]
            prev_range = high[index + 1] - low[index + 1]
            small_range = prev_range > 0 ? current_range < (prev_range * 0.6) : false
            
            result := is_doji or is_inside or small_range
    result

// EMA Calculations
ema_8 = ta.ema(close, 8)
ema_21 = ta.ema(close, 21)

// Plot EMAs if enabled
plot(show_ema ? ema_8 : na, color=ema_8_color, linewidth=1, title="EMA 8")
plot(show_ema ? ema_21 : na, color=ema_21_color, linewidth=2, title="EMA 21")

// Persistent storage variables
var int anchor_bar_index = na
var int forward_count = 0
var int backward_count = 0
var bool counting_started = false
var array<label> all_labels = array.new<label>()
var line anchor_line = na

// Multi-timeframe data request
mtf_data = request.security(syminfo.tickerid, higher_tf, [close, high, low, open, bar_index])

// Get current sequences
current_sequence_str = get_sequence(sequence_type)
sequence_array = parse_sequence(current_sequence_str)

// Custom sequences
custom_seq_1_array = use_custom_seq_1 ? parse_sequence(custom_sequence_1) : array.new<float>()
custom_seq_2_array = use_custom_seq_2 ? parse_sequence(custom_sequence_2) : array.new<float>()
backward_seq_array = enable_backward_count ? parse_sequence(backward_sequence) : array.new<float>()
future_seq_array = enable_future_projections ? parse_sequence(projection_sequence) : array.new<float>()

// Get label size
get_label_size() =>
    switch label_size
        "tiny" => size.tiny
        "small" => size.small
        "large" => size.large
        "huge" => size.huge
        => size.normal

// Anchor point logic
if use_manual_anchor and manual_anchor_bar >= 0
    anchor_bar_index := bar_index - manual_anchor_bar
    counting_started := true
    forward_count := 1
    backward_count := 1
    
    // Draw anchor line
    if not na(anchor_line)
        line.delete(anchor_line)
    anchor_line := line.new(anchor_bar_index, low, anchor_bar_index, high, color=color.blue, width=3, style=line.style_solid)

else if time >= start_date and not counting_started
    anchor_bar_index := bar_index
    counting_started := true
    forward_count := 1
    backward_count := 1
    
    // Draw anchor line
    anchor_line := line.new(bar_index, low, bar_index, high, color=color.blue, width=3, style=line.style_solid)

// Forward counting logic
if counting_started and forward_count <= max_candles
    is_td = enhanced_td_detection ? is_time_distortion_candle(0) : false
    should_count = true
    
    // Skip time distortion candles if enabled
    if is_td and skip_time_distortion
        should_count := false
        
        // Show TD marker
        if not display_only_sequence
            td_y = display_position == "above_candle" ? high + (high - low) * 0.05 : low - (high - low) * 0.05
            td_label = label.new(bar_index, td_y, "Ã—", color=color.new(color.white, 100), textcolor=color.new(color.gray, 50), size=size.tiny, style=label.style_none)
            array.push(all_labels, td_label)
    
    if should_count and bar_index >= anchor_bar_index
        bars_from_anchor = bar_index - anchor_bar_index + 1
        
        // Main sequence counting
        is_main_sequence = array.includes(sequence_array, float(bars_from_anchor))
        is_custom_1 = use_custom_seq_1 and array.includes(custom_seq_1_array, float(bars_from_anchor))
        is_custom_2 = use_custom_seq_2 and array.includes(custom_seq_2_array, float(bars_from_anchor))
        
        y_position = display_position == "above_candle" ? high + (high - low) * 0.1 + vertical_shift : low - (high - low) * 0.1 - vertical_shift
        
        // Create labels for sequences
        if not display_only_sequence or is_main_sequence or is_custom_1 or is_custom_2
            label_text = str.tostring(bars_from_anchor)
            
            if is_main_sequence
                label_color = sequence_color
            else if is_custom_1
                label_color = color.green
            else if is_custom_2
                label_color = color.purple
            else
                label_color = normal_color
            
            if not display_only_sequence or is_main_sequence or is_custom_1 or is_custom_2
                label_id = label.new(bar_index, y_position, label_text, color=color.new(color.white, 100), textcolor=label_color, size=get_label_size(), style=label.style_none)
                array.push(all_labels, label_id)

// Backward counting logic
if enable_backward_count and counting_started and anchor_bar_index > 0
    for i = 1 to 50
        back_bar_index = anchor_bar_index - i
        if back_bar_index >= 0
            is_backward_sequence = array.includes(backward_seq_array, float(i))
            if is_backward_sequence
                y_position = display_position == "above_candle" ? high[bar_index - back_bar_index] + (high[bar_index - back_bar_index] - low[bar_index - back_bar_index]) * 0.1 : low[bar_index - back_bar_index] - (high[bar_index - back_bar_index] - low[bar_index - back_bar_index]) * 0.1
                label_text = "-" + str.tostring(i)
                label_id = label.new(back_bar_index, y_position, label_text, color=color.new(color.white, 100), textcolor=backward_color, size=get_label_size(), style=label.style_none)
                array.push(all_labels, label_id)

// Future projections
if enable_future_projections and counting_started
    current_bars_from_anchor = bar_index - anchor_bar_index + 1
    for i = 1 to 21
        future_count = current_bars_from_anchor + i
        is_future_sequence = array.includes(future_seq_array, float(future_count))
        if is_future_sequence
            future_bar_index = bar_index + i
            y_position = display_position == "above_candle" ? high + (high - low) * 0.1 : low - (high - low) * 0.1
            label_text = "+" + str.tostring(future_count)
            label_id = label.new(future_bar_index, y_position, label_text, color=color.new(color.white, 100), textcolor=future_color, size=get_label_size(), style=label.style_none)
            array.push(all_labels, label_id)

// Multi-timeframe confluence detection
if enable_mtf and show_mtf_confluence and counting_started
    mtf_close = array.get(mtf_data, 0)
    current_bars = bar_index - anchor_bar_index + 1
    
    // Simple MTF count simulation (this would need more complex logic for real MTF)
    mtf_count = math.floor(current_bars / 4) // Simplified for demonstration
    mtf_sequence_array = parse_sequence(mtf_sequence)
    
    is_mtf_confluence = array.includes(mtf_sequence_array, float(current_bars)) and array.includes(mtf_sequence_array, float(mtf_count))
    if is_mtf_confluence
        confluence_y = display_position == "above_candle" ? high + (high - low) * 0.2 : low - (high - low) * 0.2
        confluence_label = label.new(bar_index, confluence_y, "â—†", color=color.new(color.white, 100), textcolor=confluence_color, size=size.large, style=label.style_none)
        array.push(all_labels, confluence_label)

// Status line display
if inputs_in_status and barstate.islast
    status_parts = array.new<string>()
    array.push(status_parts, "DINC Pro: " + current_sequence_str)
    
    if counting_started
        current_count = bar_index - anchor_bar_index + 1
        array.push(status_parts, "Count: " + str.tostring(current_count))
    
    if use_custom_seq_1
        array.push(status_parts, "Seq1: " + custom_sequence_1)
    if use_custom_seq_2
        array.push(status_parts, "Seq2: " + custom_sequence_2)
    if enable_backward_count
        array.push(status_parts, "Back: ON")
    if enable_future_projections
        array.push(status_parts, "Future: ON")
    if enable_mtf
        array.push(status_parts, "MTF: " + higher_tf)
    if enhanced_td_detection
        array.push(status_parts, "TD: ON")
    
    status_text = array.join(status_parts, " | ")
    var table status_table = table.new(position.top_right, 1, 1, bgcolor=color.new(color.white, 80), border_width=1)
    table.cell(status_table, 0, 0, status_text, text_color=color.black, text_size=size.tiny)

// Alert conditions
if counting_started
    current_count_float = float(bar_index - anchor_bar_index + 1)
    if array.includes(sequence_array, current_count_float)
        alert("DINC Sequence Number Reached: " + str.tostring(current_count_float), alert.freq_once_per_bar)
    
    if use_custom_seq_1 and array.includes(custom_seq_1_array, current_count_float)
        alert("Custom Sequence 1 Hit: " + str.tostring(current_count_float), alert.freq_once_per_bar)
    
    if use_custom_seq_2 and array.includes(custom_seq_2_array, current_count_float)
        alert("Custom Sequence 2 Hit: " + str.tostring(current_count_float), alert.freq_once_per_bar)